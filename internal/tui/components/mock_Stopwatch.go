// Code generated by mockery v2.50.1. DO NOT EDIT.

package components

import (
	tea "github.com/charmbracelet/bubbletea"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockStopwatch is an autogenerated mock type for the Stopwatch type
type MockStopwatch struct {
	mock.Mock
}

type MockStopwatch_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStopwatch) EXPECT() *MockStopwatch_Expecter {
	return &MockStopwatch_Expecter{mock: &_m.Mock}
}

// Elapsed provides a mock function with no fields
func (_m *MockStopwatch) Elapsed() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Elapsed")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// MockStopwatch_Elapsed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Elapsed'
type MockStopwatch_Elapsed_Call struct {
	*mock.Call
}

// Elapsed is a helper method to define mock.On call
func (_e *MockStopwatch_Expecter) Elapsed() *MockStopwatch_Elapsed_Call {
	return &MockStopwatch_Elapsed_Call{Call: _e.mock.On("Elapsed")}
}

func (_c *MockStopwatch_Elapsed_Call) Run(run func()) *MockStopwatch_Elapsed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStopwatch_Elapsed_Call) Return(_a0 time.Duration) *MockStopwatch_Elapsed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStopwatch_Elapsed_Call) RunAndReturn(run func() time.Duration) *MockStopwatch_Elapsed_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with no fields
func (_m *MockStopwatch) Init() tea.Cmd {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 tea.Cmd
	if rf, ok := ret.Get(0).(func() tea.Cmd); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tea.Cmd)
		}
	}

	return r0
}

// MockStopwatch_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockStopwatch_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
func (_e *MockStopwatch_Expecter) Init() *MockStopwatch_Init_Call {
	return &MockStopwatch_Init_Call{Call: _e.mock.On("Init")}
}

func (_c *MockStopwatch_Init_Call) Run(run func()) *MockStopwatch_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStopwatch_Init_Call) Return(_a0 tea.Cmd) *MockStopwatch_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStopwatch_Init_Call) RunAndReturn(run func() tea.Cmd) *MockStopwatch_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0
func (_m *MockStopwatch) Update(_a0 tea.Msg) (tea.Model, tea.Cmd) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 tea.Model
	var r1 tea.Cmd
	if rf, ok := ret.Get(0).(func(tea.Msg) (tea.Model, tea.Cmd)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(tea.Msg) tea.Model); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tea.Model)
		}
	}

	if rf, ok := ret.Get(1).(func(tea.Msg) tea.Cmd); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(tea.Cmd)
		}
	}

	return r0, r1
}

// MockStopwatch_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockStopwatch_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 tea.Msg
func (_e *MockStopwatch_Expecter) Update(_a0 interface{}) *MockStopwatch_Update_Call {
	return &MockStopwatch_Update_Call{Call: _e.mock.On("Update", _a0)}
}

func (_c *MockStopwatch_Update_Call) Run(run func(_a0 tea.Msg)) *MockStopwatch_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(tea.Msg))
	})
	return _c
}

func (_c *MockStopwatch_Update_Call) Return(_a0 tea.Model, _a1 tea.Cmd) *MockStopwatch_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStopwatch_Update_Call) RunAndReturn(run func(tea.Msg) (tea.Model, tea.Cmd)) *MockStopwatch_Update_Call {
	_c.Call.Return(run)
	return _c
}

// View provides a mock function with no fields
func (_m *MockStopwatch) View() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for View")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockStopwatch_View_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'View'
type MockStopwatch_View_Call struct {
	*mock.Call
}

// View is a helper method to define mock.On call
func (_e *MockStopwatch_Expecter) View() *MockStopwatch_View_Call {
	return &MockStopwatch_View_Call{Call: _e.mock.On("View")}
}

func (_c *MockStopwatch_View_Call) Run(run func()) *MockStopwatch_View_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStopwatch_View_Call) Return(_a0 string) *MockStopwatch_View_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStopwatch_View_Call) RunAndReturn(run func() string) *MockStopwatch_View_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStopwatch creates a new instance of MockStopwatch. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStopwatch(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStopwatch {
	mock := &MockStopwatch{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
